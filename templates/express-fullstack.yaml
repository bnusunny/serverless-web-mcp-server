AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Fullstack application with Express.js backend and React frontend

Metadata:
  AWS::ServerlessRepo::Application:
    Name: express-fullstack
    Description: Fullstack application with Express.js backend and React frontend
    Author: Serverless Web MCP Server
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    ReadmeUrl: README.md

Parameters:
  ProjectName:
    Type: String
    Description: Name of the project
    Default: fullstack-app
  
  Runtime:
    Type: String
    Description: Lambda runtime
    Default: nodejs18.x
    AllowedValues:
      - nodejs16.x
      - nodejs18.x
      - nodejs20.x
  
  MemorySize:
    Type: Number
    Description: Lambda memory size in MB
    Default: 512
    MinValue: 128
    MaxValue: 10240
  
  Timeout:
    Type: Number
    Description: Lambda timeout in seconds
    Default: 30
    MinValue: 3
    MaxValue: 900
  
  IndexDocument:
    Type: String
    Description: Index document for the frontend
    Default: index.html
  
  ErrorDocument:
    Type: String
    Description: Error document for the frontend
    Default: index.html

Resources:
  # Backend resources
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-backend-function
      CodeUri: ./src/backend
      Handler: app.handler
      Runtime: !Ref Runtime
      MemorySize: !Ref MemorySize
      Timeout: !Ref Timeout
      Environment:
        Variables:
          NODE_ENV: production
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /api/{proxy+}
            Method: ANY
      Policies:
        - AWSLambdaBasicExecutionRole
  
  # Frontend resources
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-frontend-bucket
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: !Ref IndexDocument
        ErrorDocument: !Ref ErrorDocument
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000
  
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${WebsiteBucket}/*
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
  
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${ProjectName}-oac
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            Id: S3Origin
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ''
          - DomainName: !Sub ${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com
            Id: ApiOrigin
            OriginPath: /Prod
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
        Enabled: true
        DefaultRootObject: !Ref IndexDocument
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - PathPattern: /api/*
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: ApiOrigin
            ForwardedValues:
              QueryString: true
              Headers:
                - Authorization
                - Content-Type
              Cookies:
                Forward: all
            ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: !Sub /${IndexDocument}
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: !Sub /${IndexDocument}

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/
  
  FunctionName:
    Description: Lambda function name
    Value: !Ref ApiFunction
  
  FunctionArn:
    Description: Lambda function ARN
    Value: !GetAtt ApiFunction.Arn
  
  BucketName:
    Description: S3 bucket name
    Value: !Ref WebsiteBucket
  
  BucketUrl:
    Description: S3 website URL
    Value: !GetAtt WebsiteBucket.WebsiteURL
  
  CloudFrontDistributionId:
    Description: CloudFront distribution ID
    Value: !Ref CloudFrontDistribution
  
  CloudFrontDomainName:
    Description: CloudFront domain name
    Value: !GetAtt CloudFrontDistribution.DomainName
